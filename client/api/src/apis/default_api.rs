/*
 * backend
 *
 * Todoapp backend: manage tasks
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: womeier@posteo.de
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::pin::Pin;
use std::sync::Arc;

use futures::Future;
use hyper;
use hyper_util::client::legacy::connect::Connect;

use super::request as __internal_request;
use super::{configuration, Error};
use crate::models;

pub struct DefaultApiClient<C: Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> DefaultApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> DefaultApiClient<C> {
        DefaultApiClient { configuration }
    }
}

pub trait DefaultApi: Send + Sync {
    fn create_task(
        &self,
        title: &str,
        done: Option<bool>,
        label: Option<&str>,
        new_task: models::NewTask,
    ) -> Pin<Box<dyn Future<Output = Result<models::Task, Error>> + Send>>;
    fn get_task(
        &self,
        tid: i32,
    ) -> Pin<Box<dyn Future<Output = Result<models::Task, Error>> + Send>>;
    fn list_tasks(&self) -> Pin<Box<dyn Future<Output = Result<Vec<models::Task>, Error>> + Send>>;
    fn update_task(
        &self,
        done: Option<bool>,
        label: Option<&str>,
        tid: i32,
        update_task: models::UpdateTask,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
}

impl<C: Connect> DefaultApi for DefaultApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn create_task(
        &self,
        title: &str,
        done: Option<bool>,
        label: Option<&str>,
        new_task: models::NewTask,
    ) -> Pin<Box<dyn Future<Output = Result<models::Task, Error>> + Send>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::POST, "/api/v1/tasks".to_string());
        req = req.with_path_param("title".to_string(), title.to_string());
        match done {
            Some(param_value) => {
                req = req.with_path_param("done".to_string(), param_value.to_string());
            }
            None => {
                req = req.with_path_param("done".to_string(), "".to_string());
            }
        }
        match label {
            Some(param_value) => {
                req = req.with_path_param("label".to_string(), param_value.to_string());
            }
            None => {
                req = req.with_path_param("label".to_string(), "".to_string());
            }
        }
        req = req.with_body_param(new_task);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_task(
        &self,
        tid: i32,
    ) -> Pin<Box<dyn Future<Output = Result<models::Task, Error>> + Send>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/api/v1/tasks/{tid}".to_string());
        req = req.with_path_param("tid".to_string(), tid.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn list_tasks(&self) -> Pin<Box<dyn Future<Output = Result<Vec<models::Task>, Error>> + Send>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/api/v1/tasks".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_task(
        &self,
        done: Option<bool>,
        label: Option<&str>,
        tid: i32,
        update_task: models::UpdateTask,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/api/v1/tasks/{tid}".to_string(),
        );
        match done {
            Some(param_value) => {
                req = req.with_path_param("done".to_string(), param_value.to_string());
            }
            None => {
                req = req.with_path_param("done".to_string(), "".to_string());
            }
        }
        match label {
            Some(param_value) => {
                req = req.with_path_param("label".to_string(), param_value.to_string());
            }
            None => {
                req = req.with_path_param("label".to_string(), "".to_string());
            }
        }
        req = req.with_path_param("tid".to_string(), tid.to_string());
        req = req.with_body_param(update_task);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }
}
